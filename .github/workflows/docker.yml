name: Run Tests

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Stop and remove all containers
        run: |
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build the Docker image
        run: docker build -t playwright-tests -f Docker/tests.dockerfile .

      - name: Run Docker container
        id: run-container
        run: |
          docker run -d --name playwright-tests \
            --memory 8g \
            -e PASSWORD="${{ secrets.PASSWORD }}" \
            -e HEADLESS_MODE="true" \
            -e TEST_ENVIRONMENT="qa" \
            -e BROWSER="chrome" \
            -p 5050:5050 \
            playwright-tests

      - name: Wait for Docker container to start
        run: sleep 30

      - name: Find Allure report directory
        run: |
          container_id=$(docker ps -qf "name=playwright-tests")
          echo "Container ID: $container_id"  # Debugging
          if [[ -n "$container_id" ]]; then
            allure_directory=$(docker exec $container_id find /tmp -type d -name "allure-report" -print -quit)
            echo "Allure Directory: $allure_directory"  # Debugging
            echo "ALLURE_DIRECTORY=$allure_directory" >> $GITHUB_ENV
          else
            echo "Container not found or not running."
          fi

      - name: Check and adjust permissions for allure-results directory
        run: |
          # Check current permissions of allure-results directory
          ls -ld allure-results

          # Adjust permissions if necessary (for example, give write permission to everyone)
          chmod 777 allure-results

      - name: Copy Allure report out of Docker container
        run: |
          container_id=$(docker ps -qf "name=playwright-tests")
          allure_directory="${{ env.ALLURE_DIRECTORY }}"
          if [[ -n "$allure_directory" ]]; then
            docker cp $container_id:$allure_directory allure-results
          else
            echo "Allure directory not found."
          fi

      - name: Archive Allure report directory
        uses: actions/upload-artifact@v2
        with:
          name: allure-report
          path: ${{ env.ALLURE_DIRECTORY }}

      - name: Retrieve and extract Allure report artifact
        uses: actions/download-artifact@v2
        with:
          name: allure-report
          path: allure-report

      - name: Generate Allure report
        run: |
          cd allure-report
          # Replace this command with the actual command to generate the Allure report
          allure generate --clean
          
      - name: Deploy to Netlify
        run: |
          npm install -g netlify-cli  # Install Netlify CLI
          cd allure-report
          netlify deploy --prod --dir . --message "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}          

      # - name: Start Python HTTP server
      #   run: |
      #     cd allure-results
      #     python3 -m http.server 8000 >/dev/null 2>&1 &
      #     echo "Python HTTP server started."

      # - name: Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v2.0
      #   with:
      #     publish-dir: './allure-results'
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions"
      #     enable-pull-request-comment: false
      #     enable-commit-comment: true
      #     overwrites-pull-request-comment: true
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      #   timeout-minutes: 1
